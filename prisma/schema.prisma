generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PreviewPage {
  id                Int               @id @default(autoincrement())
  blocks            Block[]           @relation("PreviewPageToBlocks")
  blockOrder        String[]
  title             String            @default("Page Title")
  description       String            @default("Page Description")
  backgroundColor   String?
  homePage          HomePage?         @relation("PreviewPageToHomePage", fields: [homePageId], references: [id])
  homePageId        Int?
  webPage           WebPage?          @relation("PreviewPageToWebPage", fields: [webPageId], references: [id])
  webPageId         Int?
  article           Article?          @relation("PreviewPageToArticle", fields: [articleId], references: [id])
  articleId         Int?
  isActive          Boolean           @default(true)
  thumbnail         Image?            @relation("PreviewPageImage")
  articleCategories ArticleCategory[] @relation("ArticleCategoryToPreviewPage")

  publishedAt DateTime?
  publisher   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model HomePage {
  id              Int           @id @default(autoincrement())
  blocks          Block[]       @relation("HomePageToBlocks")
  blockOrder      String[]
  title           String        @default("Homepage")
  description     String        @default("HomePage Description")
  backgroundColor String?
  previewPage     PreviewPage[] @relation("PreviewPageToHomePage")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model WebPage {
  id              Int           @id @default(autoincrement())
  blocks          Block[]       @relation("WebPagesToBlocks")
  blockOrder      String[]
  description     String        @default("Page Description")
  isActive        Boolean       @default(true)
  thumbnail       Image?        @relation("WebPageImage")
  title           String        @unique
  backgroundColor String?
  previewPage     PreviewPage[] @relation("PreviewPageToWebPage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Block {
  id             String         @id @unique @default(cuid())
  previewPage    PreviewPage[]  @relation("PreviewPageToBlocks")
  article        Article[]      @relation("ArticlesToBlocks")
  articleBlock   ArticleBlock?  @relation("BlockToArticleBlock", fields: [articleBlockId], references: [id])
  articleBlockId String?        @unique
  bannerBlock    BannerBlock?   @relation("BlockToBannerBlock", fields: [bannerBlockId], references: [id])
  bannerBlockId  String?        @unique
  blockOptions   BlockOptions[] @relation("BlockToBlockOptions")
  heroBlock      HeroBlock?     @relation("BlockToHeroBlock", fields: [heroBlockId], references: [id])
  heroBlockId    String?        @unique
  homePage       HomePage[]     @relation("HomePageToBlocks")
  productBlock   ProductBlock?  @relation("BlockToProductBlock", fields: [productBlockId], references: [id])
  productBlockId String?        @unique
  textBlock      TextBlock?     @relation("BlockToTextBlock", fields: [textBlockId], references: [id])
  textBlockId    String?        @unique
  tileBlock      TileBlock?     @relation("BlockToTileBlock", fields: [tileBlockId], references: [id])
  tileBlockId    String?        @unique
  mapBlock       MapBlock?      @relation("BlockToMapBlock", fields: [mapBlockId], references: [id])
  mapBlockId     String?        @unique
  webPage        WebPage[]      @relation("WebPagesToBlocks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockOptions {
  id                                String     @id @unique @default(cuid())
  autoplay                          String?
  backgroundBrightness              Int?
  backgroundBrightnessSecondary     Int?
  backgroundColor                   Color?
  backgroundColorSecondary          Color?
  backgroundPatternColor            String?
  backgroundPatternColorSecondary   String?
  backgroundPatternName             String?
  backgroundPatternNameSecondary    String?
  backgroundPatternOpacity          Int?
  backgroundPatternOpacitySecondary Int?
  backgroundPatternSize             Int?
  backgroundPatternSizeSecondary    Int?
  backgroundWidth                   String?
  backgroundWidthSecondary          String?
  block                             Block?     @relation("BlockToBlockOptions", fields: [blockId], references: [id])
  blockId                           String?
  borderColor                       Color?
  borderDisplay                     String?
  borderRadius                      String?
  borderSize                        String?
  color1                            String?
  color2                            String?
  color3                            String?
  color4                            String?
  color5                            String?
  color6                            String?
  colorSecondary1                   String?
  colorSecondary2                   String?
  colorSecondary3                   String?
  colorSecondary4                   String?
  colorSecondary5                   String?
  colorSecondary6                   String?
  columns                           Int?
  columnsMobile                     Int?
  count                             Int?
  filter1                           String?
  filter2                           String?
  filter3                           String?
  filter4                           String?
  filter5                           String?
  filter6                           String?
  flipX                             String?
  link1                             String?
  link2                             String?
  link3                             String?
  link4                             String?
  link5                             String?
  link6                             String?
  margin                            String?
  order                             Int?
  padding                           String?
  rows                              Int?
  shortText                         String?
  shortTextColor                    Color?
  size                              String?
  sizeMobile                        String?
  sortBy                            SortBy?
  sortOrder                         SortOrder?
  speed                             String?
  style                             String?
  title                             String?
  title1                            String?
  title2                            String?
  title3                            String?
  title4                            String?
  title5                            String?
  title6                            String?
  titleColor                        Color?
  itemColor                         String?
  itemSecondaryColor                String?
  titleAlign                        String?
  titleSize                         String?
  titleWeight                       String?
  itemBorderDisplay                 String?
  itemBorderSize                    String?
  itemBorderColor                   String?
  itemBorderRadius                  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HeroBlock {
  id      String            @id @unique @default(cuid())
  block   Block?            @relation("BlockToHeroBlock")
  content HeroBlockContent? @relation("HeroBlockContentToHeroBlock")
  name    String            @default("hero")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HeroBlockContent {
  id          String     @id @unique @default(cuid())
  image       Image?     @relation("ImageToHeroBlockContent", fields: [imageId], references: [id])
  imageId     Int?
  heroBlock   HeroBlock? @relation("HeroBlockContentToHeroBlock", fields: [heroBlockId], references: [id])
  heroBlockId String?    @unique
  product     Product?   @relation("ProductToHeroBlockContent", fields: [productId], references: [id])
  productId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BannerBlock {
  id      String              @id @unique @default(cuid())
  block   Block?              @relation("BlockToBannerBlock")
  content BannerBlockContent? @relation("BannerBlockContentToBannerBlock")
  name    String              @default("banner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BannerBlockContent {
  id            String       @id @unique @default(cuid())
  bannerBlock   BannerBlock? @relation("BannerBlockContentToBannerBlock", fields: [bannerBlockId], references: [id])
  bannerBlockId String?      @unique
  campaign      Campaign?    @relation("CampaignToBannerBlockContent", fields: [campaignId], references: [id])
  campaignId    Int?
  image         Image?       @relation("ImageToBannerBlockContent", fields: [imageId], references: [id])
  imageId       Int?
  promotion     Promotion?   @relation("PromotionToBannerBlockContent", fields: [promotionId], references: [id])
  promotionId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TileBlock {
  id      String            @id @unique @default(cuid())
  block   Block?            @relation("BlockToTileBlock")
  content TileBlockContent? @relation("TileBlockContentToTileBlock")
  name    String            @default("tile")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TileBlockContent {
  id        String      @id @unique @default(cuid())
  campaign  Campaign[]  @relation("CampaignToTileBlockContent")
  promotion Promotion[] @relation("PromotionToTileBlockContent")
  brand     Brand[]     @relation("BrandToTileBlockContent")
  image     Image[]     @relation("ImageToTileBlockContent")
  icon      String[]

  tileBlock   TileBlock? @relation("TileBlockContentToTileBlock", fields: [tileBlockId], references: [id])
  tileBlockId String?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextBlock {
  id      String            @id @unique @default(cuid())
  block   Block?            @relation("BlockToTextBlock")
  content TextBlockContent? @relation("TextBlockContentToTextBlock")
  name    String            @default("text")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextBlockContent {
  id          String     @id @unique @default(cuid())
  richText    String
  textBlock   TextBlock? @relation("TextBlockContentToTextBlock", fields: [textBlockId], references: [id])
  textBlockId String?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductBlock {
  id      String               @id @unique @default(cuid())
  block   Block?               @relation("BlockToProductBlock")
  content ProductBlockContent? @relation("ProductBlockContentToProductBlock")
  name    String               @default("product")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductBlockContent {
  id                   String              @id @unique @default(cuid())
  brand                Brand?              @relation("BrandToProductBlock", fields: [brandId], references: [id])
  brandId              Int?
  gender               Gender?
  productBlock         ProductBlock?       @relation("ProductBlockContentToProductBlock", fields: [productBlockId], references: [id])
  productBlockId       String?             @unique
  productCategory      ProductCategory?    @relation("ProductCategoryToProductBlock", fields: [productCategoryId], references: [id])
  productCategoryId    Int?
  productSubCategory   ProductSubCategory? @relation("ProductSubCategoryToProductBlock", fields: [productSubCategoryId], references: [id])
  productSubCategoryId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleBlock {
  id      String               @id @unique @default(cuid())
  block   Block?               @relation("BlockToArticleBlock")
  content ArticleBlockContent? @relation("ArticleBlockContentToArticleBlock")
  name    String               @default("product")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleBlockContent {
  id                String           @id @unique @default(cuid())
  articleBlock      ArticleBlock?    @relation("ArticleBlockContentToArticleBlock", fields: [articleBlockId], references: [id])
  articleBlockId    String?          @unique
  articleCategory   ArticleCategory? @relation("ArticleCategoryToArticleBlock", fields: [articleCategoryId], references: [id])
  articleCategoryId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapBlock {
  id        String           @id @unique @default(cuid())
  block     Block?           @relation("BlockToMapBlock")
  content   MapBlockContent? @relation("MapBlockContentToMapBlock")
  name      String           @default("map")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model MapBlockContent {
  id         String    @id @unique @default(cuid())
  mapBlock   MapBlock? @relation("MapBlockContentToMapBlock", fields: [mapBlockId], references: [id])
  mapBlockId String?   @unique
  store      Store[]   @relation("StoreToMapBlockContent")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Store {
  id                Int               @id @default(autoincrement())
  name              String
  phoneNumber       String?
  faxNumber         String?
  address           Address?
  stock             StockLevel[]
  orderItem         OrderItem[]
  staff             Staff[]           @relation("StaffStore")
  paymentProviderId String?
  isActive          Boolean           @default(true)
  mapBlockContent   MapBlockContent[] @relation("StoreToMapBlockContent")
  team              Team[]

  fromStoreStockRequest StockTransferRequest[] @relation("FromStoreStockRequest")
  toStoreStockRequest   StockTransferRequest[] @relation("ToStoreStockRequest")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Team {
  id        Int       @id @default(autoincrement())
  name      String
  staff     Staff[]
  store     Store?    @relation(fields: [storeId], references: [id])
  storeId   Int?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt //remove optional
}

model Staff {
  id                   String       @id @unique @default(cuid())
  address              Address?
  avatar               Image?       @relation("StaffAvatarImage")
  doubleAuthentication Boolean      @default(false)
  email                String       @unique
  isActive             Boolean      @default(true)
  role                 Role         @default(STAFF)
  jobTitle             String?
  password             String?
  userDetails          UserDetails?
  userDetailsId        String?      @unique
  store                Store?       @relation("StaffStore", fields: [storeId], references: [id])
  storeId              Int?         @unique
  team                 Team?        @relation(fields: [teamId], references: [id])
  teamId               Int?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model User {
  id                   String       @id @unique @default(cuid())
  address              Address?
  avatar               Image?       @relation("AvatarImage")
  cart                 Cart?
  doubleAuthentication Boolean      @default(false)
  email                String       @unique
  googleEmail          String?
  googleLogin          Boolean      @default(false)
  isActive             Boolean      @default(true)
  microsoftEmail       String?
  microsoftLogin       Boolean      @default(false)
  orders               Order[]
  password             String?
  role                 Role         @default(USER)
  userDetails          UserDetails?
  userDetailsId        String?      @unique
  verified             Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verifier {
  id         Int         @id @default(autoincrement())
  code       String?     @default(cuid())
  email      String      @unique
  expiration DateTime    @default(dbgenerated("NOW() + interval '3 hours'"))
  type       VerifyTypes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDetails {
  id          String    @id @unique @default(cuid())
  dateOfBirth DateTime?
  firstName   String?
  gender      Gender?
  lastName    String?
  phoneNumber String?
  staff       Staff?    @relation(fields: [staffId], references: [id])
  staffId     String?   @unique
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String  @id @unique @default(cuid())
  addressLine1 String?
  addressLine2 String?
  country      String?
  postcode     String?
  state        String?
  suburb       String?
  staff        Staff?  @relation(fields: [staffId], references: [id])
  staffId      String? @unique
  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique
  order        Order?  @relation(fields: [orderId], references: [orderId])
  orderId      String? @unique
  store        Store?  @relation(fields: [storeId], references: [id])
  storeId      Int?    @unique
  latitude     String?
  longitude    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    Int
  quantity  Int            @default(1)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  orderId             String      @id @unique @default(cuid())
  items               OrderItem[]
  rememberInformation Boolean     @default(false)
  paymentCode         String
  paymentLinkId       String
  paymentUrl          String
  status              OrderStatus
  totalPrice          Float
  user                User?       @relation(fields: [userId], references: [id])
  userId              String?
  address             Address?
  firstName           String?
  lastName            String?
  shippingMethod      String?
  shippingPrice       String?
  trackingNumber      String?
  phoneNumber         String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  order     Order          @relation(fields: [orderId], references: [orderId])
  orderId   String
  quantity  Int
  unitPrice Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  store     Store?         @relation(fields: [storeId], references: [id])
  storeId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id                   Int                  @id @default(autoincrement())
  href                 String?
  altText              String?
  article              Article?             @relation("ArticleImage", fields: [articleId], references: [id])
  articleId            Int?                 @unique
  bannerBlockContent   BannerBlockContent[] @relation("ImageToBannerBlockContent")
  brand                Brand?               @relation("BrandImage", fields: [brandId], references: [id])
  brandId              Int?                 @unique
  campaignBanner       Campaign[]           @relation("BannerImageToCampaign")
  campaignTile         Campaign[]           @relation("TileImageToCampaign")
  HeroBlockContent     HeroBlockContent[]   @relation("ImageToHeroBlockContent")
  product              Product?             @relation(fields: [productId], references: [id])
  productHero          Product[]            @relation("ProductHeroToProduct")
  productId            Int?
  productSubCategory   ProductSubCategory?  @relation("ProductSubCategoryImage", fields: [productSubCategoryId], references: [id])
  productSubCategoryId Int?                 @unique
  promotionBanner      Promotion[]          @relation("BannerImageToPromotion")
  promotionTile        Promotion[]          @relation("TileImageToPromotion")
  tileBlockContent     TileBlockContent[]   @relation("ImageToTileBlockContent")
  user                 User?                @relation("AvatarImage", fields: [userId], references: [id])
  userId               String?              @unique
  staff                Staff?               @relation("StaffAvatarImage", fields: [staffId], references: [id])
  staffId              String?              @unique
  webPage              WebPage?             @relation("WebPageImage", fields: [webPageId], references: [id])
  webPageId            Int?                 @unique

  previewPage   PreviewPage? @relation("PreviewPageImage", fields: [previewPageId], references: [id])
  previewPageId Int?         @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id                  Int               @id @default(autoincrement())
  campaigns           Campaign[]
  displayInNavigation Boolean           @default(true)
  index               Int               @default(0)
  isActive            Boolean           @default(true)
  name                String            @unique
  productCategories   ProductCategory[] @relation("DepartmentToProductCategory")
  promotions          Promotion[]

  createdAt DateTime? @default(now()) //remove optional on new app
  updatedAt DateTime? @updatedAt //remove optional on new app
}

model ProductCategory {
  id                   Int                   @id @default(autoincrement())
  articleCategories    ArticleCategory[]     @relation("ProductCategoryToArticleCategory")
  department           Department?           @relation("DepartmentToProductCategory", fields: [departmentId], references: [id])
  departmentId         Int?
  displayInNavigation  Boolean               @default(true)
  index                Int                   @default(0)
  isActive             Boolean               @default(true)
  name                 String                @unique
  productBlockContent  ProductBlockContent[] @relation("ProductCategoryToProductBlock")
  productSubCategories ProductSubCategory[]  @relation("ProductCategoryToProductSubCategory")

  createdAt DateTime? @default(now()) //remove optional on new app
  updatedAt DateTime? @updatedAt //remove optional on new app
}

model ArticleCategory {
  id                   Int                   @id @default(autoincrement())
  articleBlockContent  ArticleBlockContent[] @relation("ArticleCategoryToArticleBlock")
  articles             Article[]             @relation("ArticleCategoryToArticle")
  previewPages         PreviewPage[]         @relation("ArticleCategoryToPreviewPage")
  isActive             Boolean               @default(true)
  name                 String                @unique
  productCategory      ProductCategory?      @relation("ProductCategoryToArticleCategory", fields: [subProductCategoryId], references: [id])
  subProductCategoryId Int?

  createdAt DateTime? @default(now()) //remove optional on new app
  updatedAt DateTime? @updatedAt //remove optional on new app
}

model ProductSubCategory {
  id                   Int                   @id @default(autoincrement())
  campaigns            Campaign[]            @relation("ProductSubCategoryToCampaign")
  displayInNavigation  Boolean               @default(true)
  image                Image?                @relation("ProductSubCategoryImage")
  imageId              Int?
  index                Int                   @default(0)
  isActive             Boolean               @default(true)
  name                 String                @unique
  productBlockContent  ProductBlockContent[] @relation("ProductSubCategoryToProductBlock")
  productCategory      ProductCategory?      @relation("ProductCategoryToProductSubCategory", fields: [subProductCategoryId], references: [id])
  products             Product[]             @relation("ProductSubCategoryToProduct")
  subProductCategoryId Int?

  createdAt DateTime? @default(now()) //remove optional on new app
  updatedAt DateTime? @updatedAt //remove optional on new app
}

model Article {
  id                Int               @id @default(autoincrement())
  articleCategories ArticleCategory[] @relation("ArticleCategoryToArticle")
  backgroundColor   String?
  blockOrder        String[]
  blocks            Block[]           @relation("ArticlesToBlocks")
  createdAt         DateTime          @default(now())
  description       String            @default("Article Description")
  isActive          Boolean           @default(true)
  previewPage       PreviewPage[]     @relation("PreviewPageToArticle")
  thumbnail         Image?            @relation("ArticleImage")
  title             String            @unique
  updatedAt         DateTime          @updatedAt
}

model Campaign {
  id                   Int                  @id @default(autoincrement())
  bannerBlockContent   BannerBlockContent[] @relation("CampaignToBannerBlockContent")
  bannerImage          Image                @relation("BannerImageToCampaign", fields: [bannerImageId], references: [id])
  bannerImageId        Int                  @unique
  brands               Brand[]              @relation("BrandToCampaign")
  createdAt            DateTime             @default(now())
  department           Department           @relation(fields: [departmentId], references: [id])
  departmentId         Int
  excludedProducts     Product[]
  isActive             Boolean              @default(false)
  maxSaleRange         Float
  minSaleRange         Float
  name                 String
  productSubCategories ProductSubCategory[] @relation("ProductSubCategoryToCampaign")
  targetGender         Gender?
  tileBlockContent     TileBlockContent[]   @relation("CampaignToTileBlockContent")
  tileImage            Image                @relation("TileImageToCampaign", fields: [tileImageId], references: [id])
  tileImageId          Int                  @unique
  updatedAt            DateTime?            @default(now()) @updatedAt
}

model Promotion {
  id                 Int                  @id @default(autoincrement())
  bannerBlockContent BannerBlockContent[] @relation("PromotionToBannerBlockContent")
  bannerImage        Image                @relation("BannerImageToPromotion", fields: [bannerImageId], references: [id])
  bannerImageId      Int                  @unique
  createdAt          DateTime             @default(now())
  department         Department           @relation(fields: [departmentId], references: [id])
  departmentId       Int
  discountPercentage Float                @default(0)
  isActive           Boolean              @default(false)
  name               String
  products           Product[]            @relation("PromotionToProduct")
  targetGender       Gender?
  tileBlockContent   TileBlockContent[]   @relation("PromotionToTileBlockContent")
  tileImage          Image                @relation("TileImageToPromotion", fields: [tileImageId], references: [id])
  tileImageId        Int                  @unique
  updatedAt          DateTime?            @default(now()) @updatedAt
}

model Product {
  id                     Int                  @id @default(autoincrement())
  brand                  Brand?               @relation("BrandToProduct", fields: [brandId], references: [id])
  brandId                Int?
  campaigns              Campaign[]
  createdAt              DateTime             @default(now())
  description            String
  discountPercentageHigh Float                @default(0)
  discountPercentageLow  Float                @default(0)
  gender                 Gender?
  heroBlockContent       HeroBlockContent[]   @relation("ProductToHeroBlockContent")
  heroImage              Image?               @relation("ProductHeroToProduct", fields: [heroImageId], references: [id])
  heroImageId            Int?                 @unique
  images                 Image[]
  infoURL                String?
  isActive               Boolean              @default(true)
  name                   String
  productSubCategories   ProductSubCategory[] @relation("ProductSubCategoryToProduct")
  promotion              Promotion?           @relation("PromotionToProduct", fields: [promotionId], references: [id])
  promotionId            Int?
  totalSold              Int                  @default(0)
  updatedAt              DateTime             @updatedAt
  variants               ProductVariant[]     @relation("ProductVariants")
}

model ProductVariant {
  id                   Int                    @id @default(autoincrement())
  cartItems            CartItem[]
  color                Color?
  createdAt            DateTime               @default(now())
  height               Int                    @default(0)
  isActive             Boolean                @default(true)
  isFragile            Boolean                @default(false)
  isOnSale             Boolean                @default(false)
  isPromoted           Boolean                @default(false)
  length               Int                    @default(0)
  name                 String
  orderId              String?
  orderItems           OrderItem[]
  price                Float
  product              Product                @relation("ProductVariants", fields: [productId], references: [id])
  productId            Int
  salePrice            Float?
  size                 String?
  sku                  String                 @unique
  stock                StockLevel[]
  stockTransferRequest StockTransferRequest[] @relation("ProductVariantStockRequest")
  totalSold            Int                    @default(0)
  updatedAt            DateTime               @updatedAt
  weight               Int                    @default(0)
  width                Int                    @default(0)
}

model StockLevel {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  store            Store?          @relation(fields: [storeId], references: [id])
  storeId          Int
  updatedAt        DateTime?       @updatedAt //remove optional
}

model StockTransferRequest {
  id               Int            @id @default(autoincrement())
  fromStore        Store?         @relation("FromStoreStockRequest", fields: [fromStoreId], references: [id])
  fromStoreId      Int
  productVariant   ProductVariant @relation("ProductVariantStockRequest", fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  status           OrderStatus
  toStore          Store?         @relation("ToStoreStockRequest", fields: [toStoreId], references: [id])
  toStoreId        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id                  Int                   @id @unique @default(autoincrement())
  campaigns           Campaign[]            @relation("BrandToCampaign")
  image               Image?                @relation("BrandImage")
  imageId             Int?
  name                String                @unique
  productBlockContent ProductBlockContent[] @relation("BrandToProductBlock")
  products            Product[]             @relation("BrandToProduct")
  tileBlockContent    TileBlockContent[]    @relation("BrandToTileBlockContent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  DEVELOPER
  ADMIN
  MANAGER
  STAFF
  EDITOR
  USER
}

enum VerifyTypes {
  email
  password
}

enum Gender {
  MALE
  FEMALE
  KIDS
  UNISEX
}

enum OrderStatus {
  created
  cancelled
  paid
  shipped
  complete
}

enum SortBy {
  createdAt
  totalSold
  price
  name
  title
}

enum SortOrder {
  asc
  desc
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  BLACK
  WHITE
  GRAY
  BROWN
  SILVER
  GOLD
  NAVY
  TEAL
  MAROON
  LIME
  OLIVE
  AQUA
  INDIGO
  TRANSPARENTSM
  TRANSPARENTMD
  TRANSPARENTLG
  TRANSPARENT
}
