generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HomePage {
  id          Int      @id @default(autoincrement())
  title       String   @default("Homepage")
  description String   @default("HomePage Description")
  blocks      Block[]  @relation("HomePageToBlocks")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebPage {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String   @default("Page Description")
  blocks      Block[]  @relation("WebPagesToBlocks")
  thumbnail   Image?   @relation("WebPageImage")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Block {
  id         String    @id @unique @default(cuid())
  order      Int
  homePage   HomePage? @relation("HomePageToBlocks", fields: [homePageId], references: [id])
  homePageId Int?
  webPage    WebPage?  @relation("WebPagesToBlocks", fields: [webPageId], references: [id])
  webPageId  Int?
  article    Article?  @relation("ArticlesToBlocks", fields: [articleId], references: [id])
  articleId  Int?

  bannerBlock    BannerBlock?  @relation("BlockToBannerBlock", fields: [bannerBlockId], references: [id])
  bannerBlockId  String?       @unique
  tileBlock      TileBlock?    @relation("BlockToTileBlock", fields: [tileBlockId], references: [id])
  tileBlockId    String?       @unique
  textBlock      TextBlock?    @relation("BlockToTextBlock", fields: [textBlockId], references: [id])
  textBlockId    String?       @unique
  productBlock   ProductBlock? @relation("BlockToProductBlock", fields: [productBlockId], references: [id])
  productBlockId String?       @unique
  articleBlock   ArticleBlock? @relation("BlockToArticleBlock", fields: [articleBlockId], references: [id])
  articleBlockId String?       @unique

  blockOptions   BlockOptions? @relation(fields: [blockOptionsId], references: [id])
  blockOptionsId String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model BlockOptions {
  id        String     @id @unique @default(cuid())
  columns   Int?
  rows      Int?
  count     Int?
  size      String?
  sortBy    SortBy?
  sortOrder SortOrder?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  block     Block?
}

model BannerBlock {
  id             String        @id @unique @default(cuid())
  name           String        @default("banner")
  type           String
  block          Block?        @relation("BlockToBannerBlock")
  campaign       Campaign?     @relation(fields: [campaignId], references: [id])
  campaignId     Int?
  promotion      Promotion?    @relation(fields: [promotionId], references: [id])
  promotionId    Int?
  contentImage   ContentImage? @relation(fields: [contentImageId], references: [id])
  contentImageId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TileBlock {
  id            String         @id @unique @default(cuid())
  name          String         @default("tile")
  type          String
  block         Block?         @relation("BlockToTileBlock")
  campaigns     Campaign[]
  promotions    Promotion[]
  contentImages ContentImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextBlock {
  id        String   @id @unique @default(cuid())
  name      String   @default("text")
  block     Block?   @relation("BlockToTextBlock")
  content   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductBlock {
  id        String               @id @unique @default(cuid())
  name      String               @default("product")
  block     Block?               @relation("BlockToProductBlock")
  content   ProductBlockContent? @relation("ProductBlockContentToProductBlock")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ProductBlockContent {
  id                   String              @id @unique @default(cuid())
  productBlock         ProductBlock?       @relation("ProductBlockContentToProductBlock", fields: [productBlockId], references: [id])
  productBlockId       String?             @unique
  productCategory      ProductCategory?    @relation("ProductCategoryToProductBlock", fields: [productCategoryId], references: [id])
  productCategoryId    Int?
  productSubCategory   ProductSubCategory? @relation("ProductSubCategoryToProductBlock", fields: [productSubCategoryId], references: [id])
  productSubCategoryId Int?
  brand                Brand?              @relation("BrandToProductBlock", fields: [brandId], references: [id])
  brandId              Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model ArticleBlock {
  id        String               @id @unique @default(cuid())
  name      String               @default("product")
  block     Block?               @relation("BlockToArticleBlock")
  content   ArticleBlockContent? @relation("ArticleBlockContentToArticleBlock")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ArticleBlockContent {
  id                String           @id @unique @default(cuid())
  articleBlock      ArticleBlock?    @relation("ArticleBlockContentToArticleBlock", fields: [articleBlockId], references: [id])
  articleBlockId    String?          @unique
  articleCategory   ArticleCategory? @relation("ArticleCategoryToArticleBlock", fields: [articleCategoryId], references: [id])
  articleCategoryId Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model User {
  id                   String       @id @unique @default(cuid())
  email                String       @unique
  password             String?
  isActive             Boolean      @default(true)
  doubleAuthentication Boolean      @default(false)
  avatar               Image?       @relation("AvatarImage")
  role                 Role         @default(USER)
  cart                 Cart?
  address              Address?
  orders               Order[]
  userDetails          UserDetails?
  userDetailsId        String?      @unique
  googleLogin          Boolean      @default(false)
  googleEmail          String?
  microsoftLogin       Boolean      @default(false)
  microsoftEmail       String?
  verified             Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model Verifier {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  type       VerifyTypes
  code       String?     @default(cuid())
  expiration DateTime    @default(dbgenerated("NOW() + interval '3 hours'"))
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model UserDetails {
  id          String    @id @unique @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  gender      Gender?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id           String   @id @unique @default(cuid())
  addressLine1 String?
  addressLine2 String?
  postcode     String?
  suburb       String?
  state        String?
  country      String?
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int            @id @default(autoincrement())
  quantity  Int            @default(1)
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Order {
  orderId       String      @id @unique @default(cuid())
  status        OrderStatus
  totalPrice    Float
  paymentCode   String
  paymentUrl    String
  paymentLinkId String
  items         OrderItem[]
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  quantity  Int
  unitPrice Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  order     Order          @relation(fields: [orderId], references: [orderId])
  orderId   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Image {
  id                   Int                 @id @default(autoincrement())
  url                  String
  altText              String?
  user                 User?               @relation("AvatarImage", fields: [userId], references: [id])
  userId               String?             @unique
  webPage              WebPage?            @relation("WebPageImage", fields: [webPageId], references: [id])
  webPageId            Int?                @unique
  article              Article?            @relation("ArticleImage", fields: [articleId], references: [id])
  articleId            Int?                @unique
  product              Product?            @relation(fields: [productId], references: [id])
  productId            Int?
  productSubCategory   ProductSubCategory? @relation("ProductSubCategoryImage", fields: [productSubCategoryId], references: [id])
  productSubCategoryId Int?                @unique
  brand                Brand?              @relation("BrandImage", fields: [brandId], references: [id])
  brandId              Int?                @unique
  campaignTile         Campaign[]          @relation("TileImageToCampaign")
  campaignBanner       Campaign[]          @relation("BannerImageToCampaign")
  promotionTile        Promotion[]         @relation("TileImageToPromotion")
  promotionBanner      Promotion[]         @relation("BannerImageToPromotion")
  contentImage         ContentImage[]      @relation("ContentImageToImage")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model ContentImage {
  id      Int    @id @default(autoincrement())
  href    String
  image   Image  @relation("ContentImageToImage", fields: [imageId], references: [id])
  imageId Int    @unique

  bannerBlocks BannerBlock[]
  tileBlocks   TileBlock[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @default(now()) @updatedAt
}

model Department {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  isActive          Boolean           @default(true)
  productCategories ProductCategory[] @relation("DepartmentToProductCategory")
  campaigns         Campaign[]
  promotions        Promotion[]
}

model ProductCategory {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  department           Department?           @relation("DepartmentToProductCategory", fields: [departmentId], references: [id])
  departmentId         Int?
  articleCategories    ArticleCategory[]     @relation("ProductCategoryToArticleCategory")
  productSubCategories ProductSubCategory[]  @relation("ProductCategoryToProductSubCategory")
  productBlockContent  ProductBlockContent[] @relation("ProductCategoryToProductBlock")
  productBlockId       String?               @unique
}

model ArticleCategory {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  productCategory      ProductCategory?      @relation("ProductCategoryToArticleCategory", fields: [subProductCategoryId], references: [id])
  subProductCategoryId Int?
  articles             Article[]             @relation("ArticleCategoryToArticle")
  articleBlockContent  ArticleBlockContent[] @relation("ArticleCategoryToArticleBlock")
}

model ProductSubCategory {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  productCategory      ProductCategory?      @relation("ProductCategoryToProductSubCategory", fields: [subProductCategoryId], references: [id])
  subProductCategoryId Int?
  products             Product[]             @relation("ProductSubCategoryToProduct")
  productBlockContent  ProductBlockContent[] @relation("ProductSubCategoryToProductBlock")
  image                Image?                @relation("ProductSubCategoryImage")
  imageId              Int?
  campaigns            Campaign[]            @relation("ProductSubCategoryToCampaign")
}

model Article {
  id                Int               @id @default(autoincrement())
  title             String            @unique
  description       String            @default("Article Description")
  blocks            Block[]           @relation("ArticlesToBlocks")
  thumbnail         Image?            @relation("ArticleImage")
  isActive          Boolean           @default(true)
  articleCategories ArticleCategory[] @relation("ArticleCategoryToArticle")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Campaign {
  id                   Int                  @id @default(autoincrement())
  name                 String
  excludedProducts     Product[]
  minSaleRange         Float
  maxSaleRange         Float
  targetGender         Gender?
  isActive             Boolean              @default(false)
  tileImage            Image                @relation("TileImageToCampaign", fields: [tileImageId], references: [id])
  tileImageId          Int                  @unique
  bannerImage          Image                @relation("BannerImageToCampaign", fields: [bannerImageId], references: [id])
  bannerImageId        Int                  @unique
  department           Department           @relation(fields: [departmentId], references: [id])
  departmentId         Int
  productSubCategories ProductSubCategory[] @relation("ProductSubCategoryToCampaign")
  brands               Brand[]              @relation("BrandToCampaign")

  bannerBlocks BannerBlock[]
  tileBlocks   TileBlock[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @default(now()) @updatedAt
}

model Promotion {
  id                 Int        @id @default(autoincrement())
  name               String
  products           Product[]  @relation("PromotionToProduct")
  discountPercentage Float      @default(0)
  targetGender       Gender?
  isActive           Boolean    @default(false)
  tileImage          Image      @relation("TileImageToPromotion", fields: [tileImageId], references: [id])
  tileImageId        Int        @unique
  bannerImage        Image      @relation("BannerImageToPromotion", fields: [bannerImageId], references: [id])
  bannerImageId      Int        @unique
  department         Department @relation(fields: [departmentId], references: [id])
  departmentId       Int

  bannerBlocks BannerBlock[]
  tileBlocks   TileBlock[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @default(now()) @updatedAt
}

model Product {
  id                     Int                  @id @default(autoincrement())
  name                   String
  description            String
  infoURL                String?
  images                 Image[]
  productSubCategories   ProductSubCategory[] @relation("ProductSubCategoryToProduct")
  brand                  Brand?               @relation("BrandToProduct", fields: [brandId], references: [id])
  brandId                Int?
  variants               ProductVariant[]     @relation("ProductVariants")
  discountPercentageHigh Float                @default(0)
  discountPercentageLow  Float                @default(0)
  totalSold              Int                  @default(0)
  isActive               Boolean              @default(true)
  gender                 Gender?
  campaigns              Campaign[]
  promotion              Promotion?           @relation("PromotionToProduct", fields: [promotionId], references: [id])
  promotionId            Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  name       String
  sku        String      @unique
  price      Float
  salePrice  Float?
  isOnSale   Boolean     @default(false)
  stock      Int?
  productId  Int
  product    Product     @relation("ProductVariants", fields: [productId], references: [id])
  color      Color?
  size       Size?
  totalSold  Int         @default(0)
  cartItems  CartItem[]
  orderItems OrderItem[]
  orderId    String?
  isActive   Boolean     @default(true)
  isPromoted Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Brand {
  id                  Int                   @id @unique @default(autoincrement())
  name                String                @unique
  products            Product[]             @relation("BrandToProduct")
  productBlockContent ProductBlockContent[] @relation("BrandToProductBlock")
  image               Image?                @relation("BrandImage")
  imageId             Int?
  campaigns           Campaign[]            @relation("BrandToCampaign")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

enum Role {
  DEVELOPER
  ADMIN
  STAFF
  USER
}

enum VerifyTypes {
  email
  password
}

enum Gender {
  MALE
  FEMALE
  KIDS
  UNISEX
}

enum OrderStatus {
  created
  cancelled
  paid
  shipped
  complete
}

enum SortBy {
  createdAt
  totalSold
  price
  name
  title
}

enum SortOrder {
  asc
  desc
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  BLACK
  WHITE
  GRAY
  BROWN
  SILVER
  GOLD
  NAVY
  TEAL
  MAROON
  LIME
  OLIVE
  AQUA
  INDIGO
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}
