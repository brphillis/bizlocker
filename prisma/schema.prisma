generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SiteSettings {
  id                   Int      @id @default(autoincrement())
  navigationStyle      String   @default("productBasic")
  spinnerStyle         String   @default("shirt")
  announcementMessage  String?
  announcementIsActive Boolean  @default(false)
  announcementEndsAt   String?
  countdownIsActive    Boolean? @default(false)
  maintenanceMessage   String?
  isUnderMaintenance   Boolean? @default(false)

  createdAt String?
  updatedAt String?
}

model PreviewPage {
  id                Int               @id @default(autoincrement())
  blocks            Block[]           @relation("PreviewPageToBlocks")
  blockOrder        Int[]
  title             String            @default("Page Title")
  description       String            @default("Page Description")
  backgroundColor   String?
  homePage          HomePage?         @relation("PreviewPageToHomePage", fields: [homePageId], references: [id])
  homePageId        Int?
  webPage           WebPage?          @relation("PreviewPageToWebPage", fields: [webPageId], references: [id])
  webPageId         Int?
  article           Article?          @relation("PreviewPageToArticle", fields: [articleId], references: [id])
  articleId         Int?
  isActive          Boolean           @default(true)
  thumbnail         Image?            @relation("PreviewPageImage")
  articleCategories ArticleCategory[] @relation("ArticleCategoryToPreviewPage")

  publishedAt String?
  publisher   String?
  createdAt   String?
  updatedAt   String?
}

model HomePage {
  id              Int           @id @default(autoincrement())
  blocks          Block[]       @relation("HomePageToBlocks")
  blockOrder      Int[]
  title           String        @default("Homepage")
  description     String        @default("HomePage Description")
  backgroundColor String?
  previewPage     PreviewPage[] @relation("PreviewPageToHomePage")

  createdAt String?
  updatedAt String?
}

model WebPage {
  id              Int           @id @default(autoincrement())
  blocks          Block[]       @relation("WebPagesToBlocks")
  blockOrder      Int[]
  description     String        @default("Page Description")
  isActive        Boolean       @default(true)
  thumbnail       Image?        @relation("WebPageImage")
  title           String        @unique
  backgroundColor String?
  previewPage     PreviewPage[] @relation("PreviewPageToWebPage")

  createdAt String?
  updatedAt String?
}

model Article {
  id                Int               @id @default(autoincrement())
  articleCategories ArticleCategory[] @relation("ArticleCategoryToArticle")
  backgroundColor   String?
  blockOrder        Int[]
  blocks            Block[]           @relation("ArticlesToBlocks")
  description       String            @default("Article Description")
  isActive          Boolean           @default(true)
  previewPage       PreviewPage[]     @relation("PreviewPageToArticle")
  thumbnail         Image?            @relation("ArticleImage")
  title             String            @unique

  createdAt String?
  updatedAt String?
}

model Block {
  id           Int            @id @default(autoincrement())
  name         String
  blockOptions BlockOptions[] @relation("BlockToBlockOptions")
  content      BlockContent?  @relation("BlockContentToBlock")
  icon         String
  label        String?

  previewPage PreviewPage[] @relation("PreviewPageToBlocks")
  article     Article[]     @relation("ArticlesToBlocks")
  homePage    HomePage[]    @relation("HomePageToBlocks")
  webPage     WebPage[]     @relation("WebPagesToBlocks")

  createdAt String?
  updatedAt String?
}

model BlockContent {
  id                 Int                  @id @default(autoincrement())
  articleCategory    ArticleCategory[]    @relation("BlockContentToArticleCategories")
  gender             Gender[]
  productSubCategory ProductSubCategory[] @relation("BlockContentToProductSubCategories")
  block              Block?               @relation("BlockContentToBlock", fields: [blockId], references: [id])
  blockId            Int?                 @unique
  brand              Brand[]              @relation("BlockContentToBrands")
  campaign           Campaign[]           @relation("BlockContentToCampaigns")
  emptyItem          String[]
  icon               String[]
  image              Image[]              @relation("BlockContentToImages")
  product            Product[]            @relation("BlockContentToProducts")
  promotion          Promotion[]          @relation("BlockContentToPromotions")
  productCategory    ProductCategory[]    @relation("BlockContentToProductCategories")
  store              Store[]              @relation("BlockContentToStores")
  richText           String?

  createdAt String?
  updatedAt String?
}

model BlockOptions {
  id                                      Int        @id @default(autoincrement())
  align                                   String?
  alignMobile                             String?
  autoplay                                Boolean?
  backgroundBrightness                    Float?
  backgroundBrightnessSecondary           Float?
  backgroundColor                         String?
  backgroundColorSecondary                String?
  backgroundDisplay                       String?
  backgroundPatternColor                  String?
  backgroundPatternColorSecondary         String?
  backgroundPatternName                   String?
  backgroundPatternNameSecondary          String?
  backgroundPatternOpacity                Float?
  backgroundPatternOpacitySecondary       Float?
  backgroundPatternSize                   Int?
  backgroundPatternSizeSecondary          Int?
  backgroundWidth                         String?
  backgroundWidthSecondary                String?
  block                                   Block      @relation("BlockToBlockOptions", fields: [blockId], references: [id])
  blockId                                 Int
  borderColor                             String?
  borderDisplay                           String?
  borderRadius                            String?
  borderSize                              String?
  buttonAlign                             String?
  buttonBorderColorPrimary                String?
  buttonBorderColorSecondary              String?
  buttonColorPrimary                      String?
  buttonColorSecondary                    String?
  buttonLabelColorPrimary                 String?
  buttonLabelColorSecondary               String?
  buttonLabelPrimary                      String?
  buttonLabelSecondary                    String?
  buttonLinkPrimary                       String?
  buttonLinkSecondary                     String?
  buttonPrimary                           String?
  buttonSecondary                         String?
  colorPrimary                            String?
  colorSecondary                          String?
  columns                                 Float?
  columnsMobile                           Float?
  count                                   Int?
  flipX                                   String?
  height                                  String?
  heightMobile                            String?
  imagePosition                           String?
  imagePositionMobile                     String?
  itemAlign                               String[]
  itemAlignMobile                         String[]
  itemBorderColors                        String[]
  itemBorderDisplays                      String[]
  itemBorderRadius                        String[]
  itemBorderSizes                         String[]
  itemButtonAlign                         String[]
  itemColorOpacity                        String[]
  itemColors                              String[]
  itemFilters                             String[]
  itemImagePositions                      String[]
  itemImagePositionsMobile                String[]
  itemJustify                             String[]
  itemJustifyMobile                       String[]
  itemLinks                               String[]
  itemButtonBorderColorsPrimary           String[]
  itemButtonColorsPrimary                 String[]
  itemButtonLabelColorsPrimary            String[]
  itemButtonLabelsPrimary                 String[]
  itemButtonLinksPrimary                  String[]
  itemButtonsPrimary                      String[]
  itemBackgroundBrightnessesSecondary     Float[]
  itemBackgroundPatternNamesSecondary     String[]
  itemBackgroundPatternColorsSecondary    String[]
  itemBackgroundWidthsSecondary           String[]
  itemBackgroundDisplaysSecondary         String[]
  itemBackgroundPatternSizesSecondary     Int[]
  itemBackgroundPatternOpacitiesSecondary Float[]
  itemBackgroundColorsSecondary           String[]
  itemBackgroundColorsPrimary             String[]
  itemBackgroundBrightnessesPrimary       Float[]
  itemBackgroundPatternNamesPrimary       String[]
  itemBackgroundPatternColorsPrimary      String[]
  itemBackgroundWidthsPrimary             String[]
  itemBackgroundDisplaysPrimary           String[]
  itemBackgroundPatternSizesPrimary       Int[]
  itemBackgroundPatternOpacitiesPrimary   Float[]
  itemButtonBorderColorsSecondary         String[]
  itemButtonColorsSecondary               String[]
  itemButtonLabelColorsSecondary          String[]
  itemButtonLabelsSecondary               String[]
  itemButtonLinksSecondary                String[]
  itemButtonsSecondary                    String[]
  itemColorsSecondary                     String[]
  itemShortText                           String[]
  itemShortTextColors                     String[]
  itemShortTextSizes                      String[]
  itemShortTextSizesMobile                String[]
  itemTitleColors                         String[]
  itemTitles                              String[]
  itemTitleFontWeights                    String[]
  itemTitleFontWeightsMobile              String[]
  itemTitleSizes                          String[]
  itemTitleSizesMobile                    String[]
  justify                                 String?
  justifyMobile                           String?
  linkPrimary                             String?
  linkSecondary                           String?
  margin                                  String?
  order                                   Int?
  padding                                 String?
  rows                                    Int?
  shortText                               String?
  shortTextColor                          String?
  size                                    String?
  sizeMobile                              String?
  sortBy                                  SortBy?
  sortOrder                               SortOrder?
  speed                                   Int?
  style                                   String?
  title                                   String?
  titleAlign                              String?
  titleColor                              String?
  titleSize                               String?
  titleSizeMobile                         String?
  titleFontWeight                         String?
  titleFontWeightMobile                   String?
  width                                   String?
  widthMobile                             String?
  createdAt                               String?
  updatedAt                               String?
}

model Store {
  id                Int            @id @default(autoincrement())
  name              String
  phoneNumber       String?
  faxNumber         String?
  address           Address?
  stock             StockLevel[]
  orderItem         OrderItem[]
  staff             Staff[]        @relation("StaffStore")
  paymentProviderId String?
  isActive          Boolean        @default(true)
  blockContent      BlockContent[] @relation("BlockContentToStores")
  team              Team[]
  notifications     Notification[]

  fromStoreStockRequest StockTransferRequest[] @relation("FromStoreStockRequest")
  toStoreStockRequest   StockTransferRequest[] @relation("ToStoreStockRequest")

  createdAt String?
  updatedAt String?
}

model Team {
  id       Int     @id @default(autoincrement())
  name     String
  staff    Staff[]
  store    Store?  @relation(fields: [storeId], references: [id])
  storeId  Int?
  isActive Boolean @default(true)

  createdAt String?
  updatedAt String?
}

model Staff {
  id                   Int            @id @default(autoincrement())
  address              Address?
  avatar               Image?         @relation("StaffAvatarImage")
  doubleAuthentication Boolean        @default(false)
  email                String         @unique
  isActive             Boolean        @default(true)
  role                 Role           @default(STAFF)
  jobTitle             String?
  password             String?
  userDetails          UserDetails?
  userDetailsId        String?        @unique
  store                Store?         @relation("StaffStore", fields: [storeId], references: [id])
  storeId              Int?
  team                 Team?          @relation(fields: [teamId], references: [id])
  teamId               Int?
  notifications        Notification[]

  createdAt String?
  updatedAt String?
}

model Notification {
  id      Int    @id @default(autoincrement())
  user    User?  @relation(fields: [userId], references: [id])
  userId  Int?
  staff   Staff? @relation(fields: [staffId], references: [id])
  staffId Int?
  store   Store? @relation(fields: [storeId], references: [id])
  storeId Int?

  message   String
  dismissed Boolean @default(false)

  createdAt String?
  updatedAt String?
}

model User {
  id                   Int            @id @default(autoincrement())
  address              Address?
  avatar               Image?         @relation("AvatarImage")
  cart                 Cart?
  doubleAuthentication Boolean        @default(false)
  email                String         @unique
  googleEmail          String?
  googleLogin          Boolean        @default(false)
  isActive             Boolean        @default(true)
  microsoftEmail       String?
  microsoftLogin       Boolean        @default(false)
  orders               Order[]
  notifications        Notification[]
  password             String?
  role                 Role           @default(USER)
  userDetails          UserDetails?
  userDetailsId        String?        @unique
  verified             Boolean        @default(false)

  createdAt String?
  updatedAt String?
}

model Verifier {
  id         Int         @id @default(autoincrement())
  code       String?     @default(cuid())
  email      String      @unique
  expiration DateTime    @default(dbgenerated("NOW() + interval '3 hours'"))
  type       VerifyTypes

  createdAt String?
  updatedAt String?
}

model UserDetails {
  id          Int     @id @default(autoincrement())
  dateOfBirth String?
  firstName   String?
  gender      Gender?
  lastName    String?
  phoneNumber String?
  staff       Staff?  @relation(fields: [staffId], references: [id])
  staffId     Int?    @unique
  user        User?   @relation(fields: [userId], references: [id])
  userId      Int?    @unique

  createdAt String?
  updatedAt String?
}

model Address {
  id           Int     @id @default(autoincrement())
  addressLine1 String?
  addressLine2 String?
  country      String?
  postcode     String?
  state        String?
  suburb       String?
  staff        Staff?  @relation(fields: [staffId], references: [id])
  staffId      Int?    @unique
  user         User?   @relation(fields: [userId], references: [id])
  userId       Int?    @unique
  order        Order?  @relation(fields: [orderId], references: [id])
  orderId      Int?    @unique
  store        Store?  @relation(fields: [storeId], references: [id])
  storeId      Int?    @unique
  latitude     String?
  longitude    String?

  createdAt String?
  updatedAt String?
}

model Cart {
  id        Int        @id @default(autoincrement())
  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?       @unique

  createdAt String?
  updatedAt String?
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    Int
  quantity  Int            @default(1)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int

  createdAt String?
  updatedAt String?
}

// orderId             String      @id @unique @default(cuid())
model Order {
  id                  Int         @id @default(autoincrement())
  items               OrderItem[]
  rememberInformation Boolean     @default(false)
  paymentCode         String
  paymentLinkId       String
  paymentUrl          String
  status              OrderStatus
  totalPrice          Float
  user                User?       @relation(fields: [userId], references: [id])
  userId              Int?
  address             Address?
  firstName           String?
  lastName            String?
  shippingMethod      String?
  shippingPrice       String?
  trackingNumber      String?
  phoneNumber         String?
  email               String?

  createdAt String?
  updatedAt String?
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  order     Order          @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int
  unitPrice Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  store     Store?         @relation(fields: [storeId], references: [id])
  storeId   Int

  createdAt String?
  updatedAt String?
}

model Image {
  id                   Int                 @id @default(autoincrement())
  href                 String?
  altText              String?
  article              Article?            @relation("ArticleImage", fields: [articleId], references: [id])
  articleId            Int?                @unique
  blockContent         BlockContent[]      @relation("BlockContentToImages")
  brand                Brand?              @relation("BrandImage", fields: [brandId], references: [id])
  brandId              Int?                @unique
  campaignBanner       Campaign[]          @relation("BannerImageToCampaign")
  campaignTile         Campaign[]          @relation("TileImageToCampaign")
  product              Product?            @relation(fields: [productId], references: [id])
  productHero          Product[]           @relation("ProductHeroToProduct")
  productId            Int?
  productSubCategory   ProductSubCategory? @relation("ProductSubCategoryImage", fields: [productSubCategoryId], references: [id])
  productSubCategoryId Int?                @unique
  promotionBanner      Promotion[]         @relation("BannerImageToPromotion")
  promotionTile        Promotion[]         @relation("TileImageToPromotion")
  user                 User?               @relation("AvatarImage", fields: [userId], references: [id])
  userId               Int?                @unique
  staff                Staff?              @relation("StaffAvatarImage", fields: [staffId], references: [id])
  staffId              Int?                @unique
  webPage              WebPage?            @relation("WebPageImage", fields: [webPageId], references: [id])
  webPageId            Int?                @unique

  previewPage   PreviewPage? @relation("PreviewPageImage", fields: [previewPageId], references: [id])
  previewPageId Int?         @unique

  createdAt String?
  updatedAt String?
}

model Department {
  id                  Int               @id @default(autoincrement())
  campaigns           Campaign[]
  displayInNavigation Boolean           @default(true)
  index               Int               @default(0)
  isActive            Boolean           @default(true)
  name                String            @unique
  productCategories   ProductCategory[] @relation("DepartmentToProductCategory")
  promotions          Promotion[]

  createdAt String?
  updatedAt String?
}

model ProductCategory {
  id                   Int                  @id @default(autoincrement())
  articleCategories    ArticleCategory[]    @relation("ProductCategoryToArticleCategory")
  department           Department?          @relation("DepartmentToProductCategory", fields: [departmentId], references: [id])
  departmentId         Int?
  displayInNavigation  Boolean              @default(true)
  index                Int                  @default(0)
  isActive             Boolean              @default(true)
  name                 String               @unique
  blockContent         BlockContent[]       @relation("BlockContentToProductCategories")
  productSubCategories ProductSubCategory[] @relation("ProductCategoryToProductSubCategory")

  createdAt String?
  updatedAt String?
}

model ArticleCategory {
  id                   Int              @id @default(autoincrement())
  blockContent         BlockContent[]   @relation("BlockContentToArticleCategories")
  articles             Article[]        @relation("ArticleCategoryToArticle")
  previewPages         PreviewPage[]    @relation("ArticleCategoryToPreviewPage")
  isActive             Boolean          @default(true)
  name                 String           @unique
  productCategory      ProductCategory? @relation("ProductCategoryToArticleCategory", fields: [subProductCategoryId], references: [id])
  subProductCategoryId Int?

  createdAt String?
  updatedAt String?
}

model ProductSubCategory {
  id                  Int              @id @default(autoincrement())
  campaigns           Campaign[]       @relation("ProductSubCategoryToCampaign")
  displayInNavigation Boolean          @default(true)
  image               Image?           @relation("ProductSubCategoryImage")
  imageId             Int?
  index               Int              @default(0)
  isActive            Boolean          @default(true)
  name                String           @unique
  blockContent        BlockContent[]   @relation("BlockContentToProductSubCategories")
  productCategory     ProductCategory? @relation("ProductCategoryToProductSubCategory", fields: [productCategoryId], references: [id])
  products            Product[]        @relation("ProductSubCategoryToProduct")
  productCategoryId   Int?

  createdAt String?
  updatedAt String?
}

model Campaign {
  id                   Int                  @id @default(autoincrement())
  blockContent         BlockContent[]       @relation("BlockContentToCampaigns")
  bannerImage          Image                @relation("BannerImageToCampaign", fields: [bannerImageId], references: [id])
  bannerImageId        Int                  @unique
  brands               Brand[]              @relation("BrandToCampaign")
  department           Department           @relation(fields: [departmentId], references: [id])
  departmentId         Int
  excludedProducts     Product[]
  isActive             Boolean              @default(false)
  maxSaleRange         Float
  minSaleRange         Float
  name                 String
  productSubCategories ProductSubCategory[] @relation("ProductSubCategoryToCampaign")
  targetGender         Gender?
  tileImage            Image                @relation("TileImageToCampaign", fields: [tileImageId], references: [id])
  tileImageId          Int                  @unique

  createdAt String?
  updatedAt String?
}

model Promotion {
  id                 Int            @id @default(autoincrement())
  blockContent       BlockContent[] @relation("BlockContentToPromotions")
  bannerImage        Image          @relation("BannerImageToPromotion", fields: [bannerImageId], references: [id])
  bannerImageId      Int            @unique
  department         Department     @relation(fields: [departmentId], references: [id])
  departmentId       Int
  discountPercentage Float          @default(0)
  isActive           Boolean        @default(false)
  name               String
  metaDescription    String?
  products           Product[]      @relation("PromotionToProduct")
  targetGender       Gender?
  tileImage          Image          @relation("TileImageToPromotion", fields: [tileImageId], references: [id])
  tileImageId        Int            @unique

  createdAt String?
  updatedAt String?
}

model Product {
  id                     Int                  @id @default(autoincrement())
  brand                  Brand?               @relation("BrandToProduct", fields: [brandId], references: [id])
  brandId                Int?
  campaigns              Campaign[]
  description            String
  discountPercentageHigh Float                @default(0)
  discountPercentageLow  Float                @default(0)
  gender                 Gender?
  blockContent           BlockContent[]       @relation("BlockContentToProducts")
  heroImage              Image?               @relation("ProductHeroToProduct", fields: [heroImageId], references: [id])
  heroImageId            Int?                 @unique
  images                 Image[]
  infoURL                String?
  isActive               Boolean              @default(true)
  name                   String
  productSubCategories   ProductSubCategory[] @relation("ProductSubCategoryToProduct")
  promotion              Promotion?           @relation("PromotionToProduct", fields: [promotionId], references: [id])
  promotionId            Int?
  totalSold              Int                  @default(0)
  variants               ProductVariant[]     @relation("ProductVariants")

  createdAt String?
  updatedAt String?
}

model ProductVariant {
  id                   Int                    @id @default(autoincrement())
  cartItems            CartItem[]
  color                Color?
  height               Int                    @default(0)
  isActive             Boolean                @default(true)
  isFragile            Boolean                @default(false)
  isOnSale             Boolean                @default(false)
  isPromoted           Boolean                @default(false)
  length               Int                    @default(0)
  name                 String
  orderId              String?
  orderItems           OrderItem[]
  price                Float
  product              Product                @relation("ProductVariants", fields: [productId], references: [id])
  productId            Int
  salePrice            Float?
  size                 String?
  sku                  String                 @unique
  stock                StockLevel[]
  stockTransferRequest StockTransferRequest[] @relation("ProductVariantStockRequest")
  totalSold            Int                    @default(0)
  weight               Float                  @default(0.0)
  width                Int                    @default(0)

  createdAt String?
  updatedAt String?
}

model StockLevel {
  id               Int             @id @default(autoincrement())
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  store            Store?          @relation(fields: [storeId], references: [id])
  storeId          Int

  createdAt String?
  updatedAt String?

  @@unique([productVariantId, storeId])
}

model StockTransferRequest {
  id               Int            @id @default(autoincrement())
  fromStore        Store?         @relation("FromStoreStockRequest", fields: [fromStoreId], references: [id])
  fromStoreId      Int
  productVariant   ProductVariant @relation("ProductVariantStockRequest", fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  status           ApprovalStatus @default(created)
  trackingNumber   String?
  toStore          Store?         @relation("ToStoreStockRequest", fields: [toStoreId], references: [id])
  toStoreId        Int
  approvedBy       String?
  createdBy        String

  createdAt String?
  updatedAt String?
}

model Brand {
  id           Int            @id @unique @default(autoincrement())
  campaigns    Campaign[]     @relation("BrandToCampaign")
  image        Image?         @relation("BrandImage")
  imageId      Int?
  isActive     Boolean        @default(true)
  name         String         @unique
  blockContent BlockContent[] @relation("BlockContentToBrands")
  products     Product[]      @relation("BrandToProduct")
  createdAt    String?
  updatedAt    String?
}

enum Role {
  DEVELOPER
  ADMIN
  MANAGER
  STAFF
  EDITOR
  USER
}

enum VerifyTypes {
  email
  password
}

enum Gender {
  MALE
  FEMALE
  KIDS
  UNISEX
}

enum OrderStatus {
  created
  cancelled
  paid
  shipped
  complete
}

enum ApprovalStatus {
  created
  cancelled
  approved
  processing
  complete
}

enum SortBy {
  createdAt
  totalSold
  price
  name
  title
}

enum SortOrder {
  asc
  desc
}

enum Color {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  BLACK
  WHITE
  GRAY
  BROWN
  SILVER
  GOLD
  NAVY
  TEAL
  MAROON
  LIME
  OLIVE
  AQUA
  INDIGO
  TRANSPARENTSM
  TRANSPARENTMD
  TRANSPARENTLG
  TRANSPARENT
}

enum PageType {
  homePage
  article
  webPage
  previewPage
}
